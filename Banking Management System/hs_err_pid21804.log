#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (malloc) failed to allocate 32744 bytes for Chunk::new
# Possible reasons:
#   The system is out of physical RAM or swap space
#   The process is running with CompressedOops enabled, and the Java Heap may be blocking the growth of the native heap
# Possible solutions:
#   Reduce memory load on the system
#   Increase physical memory or swap space
#   Check if swap backing store is full
#   Decrease Java heap size (-Xmx/-Xms)
#   Decrease number of Java threads
#   Decrease Java thread stack sizes (-Xss)
#   Set larger code cache with -XX:ReservedCodeCacheSize=
#   JVM is running with Unscaled Compressed Oops mode in which the Java heap is
#     placed in the first 4GB address space. The Java Heap base address is the
#     maximum limit for the native heap growth. Please use -XX:HeapBaseMinAddress
#     to set the Java Heap base and to place the Java Heap above 4GB virtual address.
# This output file may be truncated or incomplete.
#
#  Out of Memory Error (arena.cpp:184), pid=21804, tid=23524
#
# JRE version: Java(TM) SE Runtime Environment (19.0.2+7) (build 19.0.2+7-44)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (19.0.2+7-44, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# No core dump will be written. Minidumps are not enabled by default on client versions of Windows
#

---------------  S U M M A R Y ------------

Command Line: -Dfile.encoding=UTF-8 -XX:+ShowCodeDetailsInExceptionMessages banking.SignupThree

Host: Intel(R) Core(TM) i5-10300H CPU @ 2.50GHz, 8 cores, 7G,  Windows 11 , 64 bit Build 22621 (10.0.22621.1928)
Time: Mon Jul  3 05:25:31 2023 India Standard Time elapsed time: 1741.536574 seconds (0d 0h 29m 1s)

---------------  T H R E A D  ---------------

Current thread (0x00000241463e4cb0):  JavaThread "C1 CompilerThread0" daemon [_thread_in_native, id=23524, stack(0x000000a052f00000,0x000000a053000000)]


Current CompileTask:
C1:1741536 1327   !   3       java.util.concurrent.locks.AbstractQueuedSynchronizer::acquire (407 bytes)

Stack: [0x000000a052f00000,0x000000a053000000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x6ee21a]
V  [jvm.dll+0x85765e]
V  [jvm.dll+0x85904e]
V  [jvm.dll+0x859703]
V  [jvm.dll+0x28298f]
V  [jvm.dll+0xc9adf]
V  [jvm.dll+0xc9e65]
V  [jvm.dll+0xd584d]
V  [jvm.dll+0x1a465b]
V  [jvm.dll+0x1ac0b6]
V  [jvm.dll+0x1a3dc0]
V  [jvm.dll+0x1a32cc]
V  [jvm.dll+0x1acb9b]
V  [jvm.dll+0x1a4448]
V  [jvm.dll+0x1a7bdf]
V  [jvm.dll+0x1616d3]
V  [jvm.dll+0x160fb2]
V  [jvm.dll+0x161208]
V  [jvm.dll+0x160666]
V  [jvm.dll+0x16235d]
V  [jvm.dll+0x25b25a]
V  [jvm.dll+0x2596e8]
V  [jvm.dll+0x807588]
V  [jvm.dll+0x80125a]
